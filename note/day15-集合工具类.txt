1.什么类型的数据可以作为TreeSet的key?
	必须实现了Comparable或者Comparator接口的类
	ArrayList,数组 不能作为TreeMap的key
          注意:元素能不能作为TreeMap的key,只与元素本身有关系,根元素内部的没有关系
2.数组转集合:
	1.集合的方法多,便于操作

3.简单数据类型数组转集合:
	整个数组会被作为一个整体存入集合,作为集合的一个元素.
	List<int[]> asList = Arrays.asList(arr);
4.引用类型数组转集合:
	集合中的泛型就是数组中元素的类型
	注意:由数组转成的集合,长度是固定的.
	也就是从数组传承的集合的内存长度是任然是一个定值,不能增加删除,但是能修改,取值
	String[]strs = {"Hello","Java","Php"};
	List<String> list = Arrays.asList(strs);
	//list.add("Hello");非法
	asList2.set(0, "World");//合法
	//asList2.remove(0);非法
5.增强for循环:foreach()
	不能直接用于map
	原理:会将数组或者集合中的元素一次取出,
		放入:前面定义的变量中,当次操作的就是该变量的值
	遍历map:
		1.先得到装着key或者entry的集合
		2.使用foreach
6.可变参数方法:
	1.可变部分的参数可传可不传
	2.可变部分只能放到参数列表的最后,且只能有一个可变参数.
	3.可变参数相当于数组
		private void test(int[]aar);
		private void test(int...aar);
		这两个函数相当于一个函数,不能放到一个类型中当做函数重载
	4.当有固定类型的参数和可变类型的参数的重载方法同时存在时
		优先调用固定类型参数的方法
		
7.静态导入:
	通过在原来用import的基础上添加static关键字,可以直接使用类中的方法,
	但是需要通过.*的方式将类的方法在当前类中直接可见:
	import static java.util.Arrays.*;
	
	区分不同包同名方法时,将其中的一个类使用全路径名的方式:
	java.util.Arrays.asList();
	
8.运行时类Runtime:
	每个java程序都有一个运行时类 实例,通过他可以与当前运行环境相关联,通过
	RunTime.getRuntime()方法获取其实例对象
9.集合操作辅助类Collections:
	字典排序,默认是升序
	注意:要想让Collctions中的元素能通过Collections的sort实现
		字典排序,元素必须实现Comparable接口
	Collections.reverseOrder():得到按字典排序的反转比较器
	Collections.sort(list, comparator);按照自定义进行排序
	Collections.reverse(list);按照现有顺序的反转
	Collections.max(list, comparator):根据自定义比较器返回最大值
	
	
	
	
	
	