--文件管理
Linux中一切皆文件

命令:
which 命令:看一个命令在哪个位置
如:which ls:
	alias ls='ls --color=auto'
			/usr/bin/ls
pwd  查看当前目录在哪


目录结构:
linux都遵循FSH(FileSystem Hierarchy Standard)标准
淡蓝色文件夹是一个链接,如/bin
bin 普通用户使用的命令 /user/bin
sbin 管理员使用的命令
root root用户的HOME
dev 设备文件
tty:
/dev/pts/0 终端文件

/dev/null 回收站(填不满)
/dev/random 随机数文件
/dev/zero ling零设备文件

ll /dev/sd*
brw-rw----. 1 root disk 8, 0 Mar 19 20:13 /dev/sda
brw-rw----. 1 root disk 8, 1 Mar 19 20:13 /dev/sda1
brw-rw----. 1 root disk 8, 2 Mar 19 20:13 /dev/sda2

home 存储普通用户'根'目录
[root@ljy ~]# ls /home/
ljy

proc  虚拟的文件徐彤,反应出来的是内核,进程信息或实时状态

usr  系统文件 相当于windows的c:\windows
	/usr/local 软件安装文件
	/usr/bin 普通用户使用的应用程序
	/usr/sbin 管理员使用的应用程序
	/usr/lib 库文件 32bit
	/usr/lib64 64bit

boot 存放的系统启动相关的文件 例如:kernel,grub(引导安装程序)

**********************************
*etc配置文件(系统相关,一些应用的配置文件)*
**********************************

temp 临时文件(全局可写,进程产生的临时文件)

var 存放时的是一些变化文件,比如数据库,日子,邮件
	mysql: /var/lib/mysql
	vsftpd: /var/ftp
	mail: /var/mail	
	log: /var/log

==设备(只要指存储设备)挂在目录==
media   移动设备默认的挂载点
mnt     手工挂载设备的挂载点
misc    automount进程挂载
net 


文件定位 路径
路径的作用:定位文件
tree -L 2 /etc/  列出etc下的目录结构(-L 2 最多列出两层)
~表示对应的用户目录,主要用于绝对路径
touch ~/file.txt  在当前用户的用户文件夹下创建一个file.txt的文件
touch ~ljy/file.txt 在用户ljy的用户目录下创建一个file.txt
	~ljy = /home/ljy/
	
cd - 回到上次目录

mv 移动
mv file /home/ljy/temp/   将当前目录下的file文件移动到/home/ljy/temp/目录下
mv file /home/ljy/temp/f.txt 将当前目录下的file移动到/home/ljy/temp/下并重命名为f.txt

rm -rf {file1,file2,file3} 删除当前目录下的三个文件
touch ./{file1,file2,file3} 在当前目录下创建file1,file2,file3

rm -rf f*  删除当前目录下以f开始的文件或者文件夹(不包含隐藏文件) -r表示递归

wget ftp://xx.xx.xx.xx/b.txt 从文件服务器xx.xx.xx.xx上下载b.txt文件
windows的换行符 ^M$
linux的换行符 $
将window是文件转化成linux:
1.安装dos2unix
yum install dos2unix

head /etc/passwd 查看passwd的前10(默认)行
head -2 /etc/passwd 查看passwd的前2行
tail 2 /etc/passwd 查看passwd的后2行
tail /etc/passwd 查看passwd的后10(默认)行
tail -f /var/log/messages 获取日志的最后10行,并动态更新...
	=tailf /var/log/message
wc -l /var/log/messages  查看统计日志文件message的行数
8255 /var/log/messages

less /var/log/messages 分页显示日志文件 上下键翻页,按q结束

grep 'root' /var/log/messages  过滤有root的行
grep '^root' /var/log/messages 过滤以root开头的行
grep 'root#' /var/log/messages 过滤以root结尾的行

在vim编辑器的命令模式下:
	0或者^ 光标移动到行首
	$ 光标移动到行尾
	gg 光标移动到文本开始的位置
	G  光标移动到文本尾部位置
	/^d 查找以d开头的所有行
	/txt$ 查找以txt结尾的行
	y 复制
	yy 复制一行
	3yy 复制3行
	ygg 从光标位置一直复制到文件头部
	yG 从光标位置一直复制到文件尾部
	d 删除 
	dd 删除一行
	3dd 删除3行
	dgg从光标位置到文件头部全部删除
	dG 从光标位置到文件尾部全部删除
	x 删除光标所在的位置
	p 粘贴
	D 从光标处删除到行尾
	u undo撤销
	^r redo 重做
	r 可以用来修改一个字符
	o 另起一行进入插入模式
	A 光标移动到行尾,并进入插入模式
	
多行插入
	1.ctrl+v 将光标移动到多行的前面
	2.I
	3.输入要插入的内容
	4.esc键 稍微等一会就能看到效果了
多行替换(单列)
	1.ctrl+v 进入可视块
	2.移动光标选中一行
	3.输入r(进入替换模式)
	4.输入要替换的内容
ctrl+s windows下是保存,linux下是锁住屏幕,不显示操作,再按ctrl+q才显示之前ctrl+s下的所有操作
:模式下:
	:10 进入第十行
	:w 保存
	:q 退出
	:wq 保存并退出
	:q! 不保存并退出
	:wq! 强制保存退出
	:x 保存并退出
	:X 给文件加秘密
	
	:1,5 s/root/ljy 在1到5行将root替换成ljy(只替换第一列)
	:1,$ s/root/ljy 1到最后一行替换
	:1,$ s/root/ljy/g 1到最后一行全局(globe)全局替换    = % s/root/ljy/g
	:,8 s/root/ljy/g 当前行道第8行全局替换
	:% s/^#// 将所有行开头的#替换为空
	:% s@/ect/aaa@/var/log/@g  将文本中的/ect/aaa换成/var/log  所以以上的/可以换成# @等字符,方便处理有/的情况
	:% s/.*/#&/g 将所有行之前加#  .*代表整行  &之前选中的整行的引用
	:w ./list1.txt 将当前文件另存为当前目录下的list1.txt文件
	:1,5 w ./list2.txt 将当前文件的第1到5行另存为list2.txt文件
	:r ./list 将当前目录下的list文件读到当前行之后
	:5 r /etc/hosts 将/etc/hosts文件读到当前编辑文本的第5行之后

vi/vim的环境设置
:set number /set nu  设置行号
:set ic 忽略大小写 ignore case
:set ai 自动缩进
:set list 显示控制字符
:set nonu 取消行号
:set noai 取消自动缩进
:set nolist 取消显示控制字符

永久vi/vim的环境设置:
	1.切换到root 用户下
	2.vim ~/.vimrc
	3.输入set ai
		 set nu

同时编辑两个文件
vim -o Hello.java list  -o是垂直分割   -O水平分割
按^ww(ctrl ww)切换
:qall 全部退出
在编辑模式下 ctrl+p可以根据已经输入的单词的前部分查找全文中具有相同部分的单词,上下键进行选择,白色为选中状态,回车完成补全
vimdiff -O list list1  对比两个文件







安装GCC:
在编译安装 GCC 之前，系统里必须先要通过 yum 安装老版本的 GCC 和依赖库。
如果是在 x86_64 系统下编译的话，还需要安装 libgcc.i686 glibc-devel.i686 才行。

yum install -y gcc texinfo-tex flex zip libgcc.i686 glibc-devel.i686
当然，如果是在 CentOS 5 x86_64 系统下安装，则是如下命令：

yum install -y gcc texinfo-tex flex zip libgcc.i386 glibc-devel.i386
	
	yum install gcc
	如果有
	安装tree命令
	1.上传tree-1.7.0.tgz
	2.解压tree-1.7.0.tgz:
	  tar -zxvf tree-1.7.0.tgz
	3.进入到解压文件夹
	 cd tree-1.7.0
	4.安装:
	 make install
	
















