
Map:通过键值对的形式存值,不属于Collection,但是属于集合存储的数据时一对一对的
	Map是一个独立的接口
	添加数据:
	Map中的数据键是唯一的,值可以重复(可以同时有多个重复的值),一个键对应一个值,一个map可以存储多个键值对
	向Map中存值得时候,如果有重复的键,则新添加的值会覆盖前一个值覆盖,并且将覆盖的值返回.如果键不重复,则返回null
	Map<String,String>map;
	V put(K key, V value)  将指定的值与此映射中的指定键关联（可选操作）。
	void putAll(Map<? extends K,? extends V> m)  从指定的映射到这个Map（可选操作）复制所有的映射。
	
	删除数据:
	remove(key)//在删除的同时会将当前元素返回
	clear()
	
	取出数据:
	get(key)
	
	遍历1 
	得到所有键的集合,存储到set中,遍历set得到一个个的key,通过get(key)即可得到值
	Set<K> keySet
	
	遍历2
	将一个键值对放入一个entry(实体)中,再将这些实体放入set中
	遍历set,可以获得这一个个实体entry,通过一个实体entry可分别得到key,value
	Set<map.Entry<K,V>>entrySet()
	Map.Entry:得到的是每个键值对对应关系的映射关系类型的值(entry),存储到set中,遍历set,得到的元素就是映射关系类型的值(entry)
			     是Map中的一个静态接口.
			  
	
	HashMap:底层是哈希表,线程不安全的,不能排序,只能去重(重写hashCode和equals方法)
	TreeMap:底层是二叉树,线程不安全的,可以排序去重,方法两种
	
	对于Map来说,对于排序去重来说,不考虑Value,只考虑Key
	
	TreeMap的排序去重方法:
		1.让作为元素的类去实现comparable接口的compareto方法
		2.创建比较器,让比较器去实现Comparator接口的compare方法
	
	
	day14作业:
	1.单例(恶汉)
	2....
	 使用两种方式遍历
	
